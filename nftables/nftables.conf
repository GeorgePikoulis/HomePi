
#!/usr/sbin/nft -f

########################
# FILTER / FORWARDING  #
########################
table inet filter {
    chain input {
        type filter hook input priority filter; policy accept;
    }

    chain forward {
        type filter hook forward priority filter; policy drop;

        # --- DNS hardening: block IPv6 DNS from LAN/WLAN (prevents bypass) ---
        meta nfproto ipv6 iifname { "eth1", "wlan0", "wlan1" } udp dport 53 counter drop
        meta nfproto ipv6 iifname { "eth1", "wlan0", "wlan1" } tcp dport 53 counter drop
        # ---------------------------------------------------------------------

        # Wired LAN (eth1 10.0.69.0/24)
        # LAN (eth1) ↔ WAN (eth0)
        iifname "eth1" oifname "eth0" ct state new,established,related accept
        iifname "eth0" oifname "eth1" ct state established,related accept

        # Trusted Wi-Fi 5GHz (wlan1 10.0.70.0/24)
        # Trusted Wi-Fi (wlan1) ↔ WAN (eth0)
        iifname "wlan1" oifname "eth0" ct state new,established,related accept
        iifname "eth0" oifname "wlan1" ct state established,related accept
        # Trusted Wi-Fi (wlan1) ↔ LAN (eth1)
        iifname "wlan1" oifname "eth1" ct state new,established,related accept
        iifname "eth1" oifname "wlan1" ct state established,related accept

        # IoT Wi-Fi 2.4G (wlan0 10.0.72.0/24)
        # Internet only
        iifname "wlan0" oifname "eth0" ct state new,established,related accept
        iifname "eth0"    oifname "wlan0" ct state established,related accept
        # No access to eth1 (wired) or wlan0 (trusted) by omission
        # Explicit hard walls
        ip  saddr 10.0.72.0/24 ip  daddr {10.0.69.0/24,10.0.73.0/24} drop
        ip6 saddr fc00:72::/64  ip6 daddr {fc00:69::/64,fc00:73::/64} drop comment "adjust if you use ULA"


        # Tailscale
        # Tailscale ↔ Trusted Wi-Fi (wlan1)
        iifname "tailscale0" oifname "wlan1" ct state new,established,related accept
        iifname "wlan1" oifname "tailscale0" ct state established,related accept
        # Tailscale ↔ LAN
        iifname "tailscale0" oifname "eth1" ct state new,established,related accept
        iifname "eth1" oifname "tailscale0" ct state established,related accept
        # (Deliberately no Tailscale <-> IoT/Guest by default; add selectively if needed)
        # Example exception (commented):
        # ip saddr 100.64.0.0/10 ip daddr 10.0.72.123 accept  comment "Allow TS to a specific IoT device"
        # (Optional belt-and-suspenders explicit blocks)
        iifname "tailscale0" oifname "wlan0" drop
        iifname "wlan0"      oifname "tailscale0" drop

    }

    chain output {
        type filter hook output priority filter; policy accept;
    }
}

########
# NAT  #
########
table ip nat {
    chain prerouting {
        type nat hook prerouting priority dstnat; policy accept;

        # Capture LAN/WLAN DNS (v4) and force it to the Pi
        iifname { "eth1", "wlan0", "wlan1" } udp dport 53 counter redirect to :53
        iifname { "eth1", "wlan0", "wlan1" } tcp dport 53 counter redirect to :53
    }
    chain postrouting {
        type nat hook postrouting priority srcnat; policy accept;

        # Masquerade any egress to WAN
        oifname "eth0" masquerade

        # Masquerade Tailscale → LAN/WiFi so replies always work
        ip saddr 100.64.0.0/10 oifname "eth1" masquerade
        ip saddr 100.64.0.0/10 oifname "wlan0" masquerade
        ip saddr 100.64.0.0/10 oifname "wlan1" masquerade

    }
}

########################
# QoS MARKING (DSCP)   #
########################
# For SmartQueue (CAKE with diffserv). Tag by ingress interface.
table inet mangle {
  chain prerouting {
    type filter hook prerouting priority mangle; policy accept;

    # IoT low-priority
    iifname "wlan0" ip dscp set cs1
    iifname "wlan0" ip6 dscp set cs1

    # Trusted stays default CS0 (no rule required)

  }
}
